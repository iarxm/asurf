#!/bin/env bash

###################################################
# AUTHOR: IAROM MADDEN
# 
# anotr: rapid filename annotations
# 
#   tag_add: add Sx.Rx.Nx
#   tag_rm: undu 'add', keep zX..
#   tag-cl: clone file
# 
# adding format:
#   {m_pre.m_id} . {m_s.m_r.m_n} . {m_add} . {.m_z.m_ext}
#
# undu format:
#   {m_pre.m_id} . {.m_z.m_ext}
#
# cp format:
#   {m_pre.m_id} . "cl" . {.m_z.m_ext}
#
###################################################

# init

cmd="${1}"
f="${2}"      # filename: orignal inputted
shift 2

f_new=""  # new filename
f_ls=""   # all 'f' with = 'id'
Mx=""     # Concantentated meta string
m_pre=""  # prepend notation
m_id=""   # unique f id
m_s=""    # person tag
m_r=""    # rating
m_n=""    # notation
m_add=""  # notation
m_z=""    # extra annotation strings
m_ext=""  # file ext

m_pre_add="s"
m_pre_rm="A"
m_pre_cl="C"
m_pre_txt="x"

cachex="$HOME/.cache/asurf" && mkdir -p "$cachex"
log_f="$cachex/f.log"
debug="./.test/debug"


# printing

_prnt()         { printf "%s\n" "$1"; }

_print_id()     { _prnt "$f" | grep -Eo -Eo "[x,P,S,C][[:digit:]]{7,7}|S[[:digit:]]{7,7}|[x,s,S,A,C][[:digit:]]{4,4}"; } # todo: sed version? include an array of regex's?

_print_id_new() { _prnt "$m_id" | sed -E 's/^.*([0-9]{4})$/\1/'; } # cut id to 4 digits

_print_m()      { _prnt "$f" | sed -En "s/.*\.($1[a-z]+)\..*/\1/p"; } # print meta strings

_print_ext()    { _prnt "$f" | rev | cut -d "." -f -1 | rev; } # print extesion

_rm_wspace()    { _prnt "$1" | sed -e "s/ /-/g"; } # Remove all white space

_print_id_ls()  { find . -maxdepth 1 -type f -name "*$m_id*" | sed 's|^\./||'; } # ls of all files w id

_print_p()      { case "${m_ext}" in txt) _prnt "$m_pre_txt";; ano)  _prnt "$m_pre_ano";; *) _prnt "$m_pre_a";; esac ;} # prefix exceptions - data files

_print_fnew()   { _prnt "$f -> $f_new"; }

_log_f()        { _prnt "f: $f" >> "$log_f" ; _prnt "f_new: $f_new" >> "$log_f" ; }

_reset()        { eval $1="" ; }

# join

_join_yx() { [ -n "${!1}" ] && { [ ! -n "${!2}" ] && eval "$2"=${3}'${!1}' || eval "$2"='${!1}.'${3}'${!2}'; }; } # prepend2string

_join_xy() { [ -n "${!1}" ] && { [ ! -n "${!2}" ] && eval "$2"="${3}"'${!1}' || eval "$2"='${!2}.'${3}'${!1}'; }; } # append2string

# handles

_hand_test()    { [ -n "$1" ] || { _prnt "$2 ; exiting"; exit 1; }; }

_handle_no_f()  { _hand_test "$f" "no filename passed"; } # handle no id

_handle_no_id() { _hand_test "$m_id" "no id code"; } # handle no id


# load

_load_f_ls() { f_ls="$(_print_id_ls)"; }

_load_id() { # load id/files
  m_id="$(_print_id)"
  m_id="$(_print_id_new)"
  _load_f_ls
  _handle_no_id ;}

_load_m(){ # load meta strings
  m_s="$(_print_m 'S')"
  m_r="$(_print_m 'R')"
  m_n="$(_print_m 'N')"
  m_z="$(_print_m 'zX')"
  m_ext="$(_print_ext )"
  m_pre="$(_print_p )" ; }


# read

_read_init() { 
  _prnt "ID: "; _print_id
  bind -x '"\C-x": kill -SIGUSR1 $$' 2>/dev/null
  trap "exit 1" SIGUSR1; }

_read_clean() {
  m_add=$(_rm_wspace "$m_add") # remove all white space
  trap - SIGUSR1 # Restore SIG handle
  clear ;}

_readx() { _prnt "TAG: $1?"; read -e -r "$2"; _join_xy "$2" m_add "$3"; }

_read() { # read tags
  _read_init
  _readx "Surfer" "t_s" "S"
  _readx "Rating" "t_r" "R"
  _readx "Notation" "t_n" "N"
  _read_clean ;} 


# concantenating: init

_conc_m_add() { ## all; concant m's;
  _join_xy m_id   Mx "$m_pre" #1. id
  _join_xy m_s    Mx #2. Sx; client tag
  _join_xy m_r    Mx #3. Rx; rating
  _join_xy m_n    Mx #4. Nx; notation
  _join_xy m_add  Mx #5. new tags as above sq
  _join_xy m_z    Mx #6. zX; metas- persistent over undu
  _join_xy m_ext  Mx #7. extension
}

_conc_m_rm() { ## undu; concant m's; undu to base
  _join_xy m_id   Mx "$m_pre"
  _join_xy m_z    Mx
  _join_xy m_ext  Mx
}

_conc_m_cp() { ## clone; concant m's; midpend cl
  _join_xy m_id   Mx "$m_pre" # m_id
  _join_xy m_z    Mx
  _join_xy m_ext  Mx
}

_fnew() { 
  _reset Mx
  _load_m
  $1 # conc func input
  f_new="${Mx}"
  _log_f
  _print_fnew
  $2; }


# file operations

_mv()     { mv -v "$PWD/$f" "$PWD/$f_new"; clear; } # rename file w new meta

_cp()     { cp "$PWD/$f" "$PWD/$f_new"; clear; } # 

_loop()   { for i in $f_ls; do f="$i"; _fnew $1 $2; done; }


# MACROS ###################################

tg_add() { # tag; add tags to all files w id
  m_pre_a="$m_pre_add"
  _load_id
  _read
  _load_f_ls # incase new files added whilst 'read..'
  _loop _conc_m_add _mv ; }

tg_rm() { # undu; remove all annotations
  m_pre_a="$m_pre_rm"
  _load_id
  _loop _conc_m_rm _mv ; }

file_clone() { # clone
  m_pre_a="$m_pre_cl"
  _load_id
  _fnew _conc_m_cp _cp ; }

debug() { source $debug ; } # clean code/debug


# MAIN ###################################

main() {
  _handle_no_f

  case "$cmd" in # cases
    tag.mk|tag.add)   tg_add "$1" ;;
    tag.rm|undu)      tg_rm "$1" ;;
    clone)            file_clone "$1" ;;
    debug)            debug "$1" ;;
  esac  
}


main "$@"

